package externalPackage;

import java.text.DecimalFormat;
import java.util.Random;
import java.util.Scanner;

/*
 * Level up Stat database current form is based off of RnG(Praise thee lord RnG jesus!). 
 * 
 * user based addition upon stat distribution implemented!
 * 
 * version 0.1.2
 * 
 * @Author Asurakun1
 */

public class Stats {
	
	
	//Dear god my long list of variables
	private int Str;
	private int Int;
	private int Dex;
	private int Will;
	private int Luck;
	private int[] lvl = new int[50];
	private int temp1, temp2, temp3, temp4, temp5;
	private int currentlevel;
	private int statpts;
	private Scanner input = new Scanner(System.in);
	
	private int Exp = 0, reachExp = 1000;
	
	//RNG object. Praise thee RnG Jesus!
	Random rand = new Random();
	
	public int setPts(int numberOfPoints) {
		statpts = numberOfPoints;
		return statpts;
	}
	
	public void addPtsToStat() {
		
		/*
		 * God damn AP system taking up most of my code.
		 */
		boolean run = true;
		String input = new String();
		Integer inputV = new Integer(0);
		System.out.println("Now testing the system. if posts then does as expected.");
		
		while(run) {
			/*
			 * This is the stat distribution system.
			 * Goal is to have user defined stats instead of presets generated by RnG(Praise thee lord Rng Jesus!)
			 * Method to run for as long as many levels until level cap.
			 * Reaching level cap will have about 1-3 extra points. 
			 * REMEMBER this is just an experiment not a complete project.
			 */
			System.out.println("Character Stats: \n");
			getStats();
			
			while(statpts > 0) {
				System.out.println("You have a total of " + statpts + " ability points available for stat distributition.");
				System.out.println("Select the stat and the amount you would like to distribute to. Type 'exit' to return back");
				
				input = this.input.next();

				if(input.equals("exit") || input.equals("Exit")) {
					break;
				}
				
				
				//Strength allocator
				if(input.equals("Str") || input.equals("str")||input.equals("STR")) {
					while(true) {
						System.out.println("Strength has been selected. How many points would you like to distribute?");
						
						input = this.input.next();
						
						//Conversion of a String to an Integer
						if(input.equals("exit") || input.equals("Exit")) {
							break;
						}else {
						
							try {
							
								inputV = Integer.parseInt(input);
							
							} catch (NumberFormatException e) {
								System.out.println("That is not a number.");
							}
						
						}
						
						if(inputV > statpts) {
							System.out.println("Invalid amount. Exeeded the total amount of points available.\n");
						}else if(inputV < 0) {
							System.out.println("Invalid amount. Type cannot be a negative value.\n");
						}else if(inputV.intValue() == 0){
							System.out.println("Invalid amount. Entering 0 or another type is not allowed.\n" );
						}else {
							this.Str = this.Str + inputV;
							statpts = statpts - inputV;		
							System.out.println("Your strength has increased by " + inputV + ".\n");
							getStats();
							inputV = 0;
							break;
						}
						
					}
					
				}
				//Intelligence allocator
				if(input.equals("Int") || input.equals("int")||input.equals("INT")) {
					while(true) {
						System.out.println("Intelligence has been selected. How many points would you like to distribute?");
						
						input = this.input.next();
						
						//Conversion of a String to an Integer
						if(input.equals("exit") || input.equals("Exit")) {
							break;
						}else {
						
							try {
							
								inputV = Integer.parseInt(input);
							
							} catch (NumberFormatException e) {
								System.out.println("That is not a number.");
							}
						
						}
						
						if(inputV > statpts) {
							System.out.println("Invalid amount. Exeeded the total amount of points available.\n");
						}else if(inputV < 0) {
							System.out.println("Invalid amount. Type cannot be a negative value.\n");
						}else if(inputV == 0){
							System.out.println("Invalid amount. You cannot add nothing with nothing.\n" );
						}else{
							this.Int = this.Int + inputV;
							statpts = statpts - inputV;
							System.out.println("Your Intelligence has increased by " + inputV + ".\n");
							getStats();
							inputV = 0;
							break;
						}
						
					}
					
				}
				//Dexterity allocator
				if(input.equals("Dex") || input.equals("dex")||input.equals("DEX")) {
					while(true) {
						System.out.println("Dexterity has been selected. How many points would you like to distribute?");
						
						input = this.input.next();
						
						//Conversion of a String to an Integer
						if(input.equals("exit") || input.equals("Exit")) {
							break;
						}else {
						
							try {
							
								inputV = Integer.parseInt(input);
							
							} catch (NumberFormatException e) {
								System.out.println("That is not a number.");
							}
						
						}
						
						if(inputV > statpts) {
							System.out.println("Invalid amount. Exeeded the total amount of points available.\n");
						}else if(inputV < 0) {
							System.out.println("Invalid amount. Type cannot be a negative value.\n");
						}else if(inputV == 0){
							System.out.println("Invalid amount. You cannot add nothing with nothing.\n" );
						}else{
							this.Dex = this.Dex + inputV;
							statpts = statpts - inputV;
							System.out.println("Your Dexterity has increased by " + inputV + ".\n");
							getStats();
							inputV = 0;
							break;
						}	
					}	
				}
				//Will allocator
				if(input.equals("will") || input.equals("Will") || input.equals("Wll") || input.equals("wll")||input.equals("WLL")) {
					while(true) {
						System.out.println("Will has been selected. How many points would you like to distribute?");
						
						input = this.input.next();
						
						//Conversion of a String to an Integer
						if(input.equals("exit") || input.equals("Exit")) {
							break;
						}else {
						
							try {
							
								inputV = Integer.parseInt(input);
							
							} catch (NumberFormatException e) {
								System.out.println("That is not a number.");
							}
						}
						
						if(inputV > statpts) {
							System.out.println("Invalid amount. Exeeded the total amount of points available.\n");
						}else if(inputV < 0) {
							System.out.println("Invalid amount. Type cannot be a negative value.\n");
						}else if(inputV == 0){
							System.out.println("Invalid amount. You cannot add nothing with nothing.\n" );
						}else{
							this.Will = this.Will + inputV;
							statpts = statpts - inputV;
							System.out.println("Your Will has increased by " + inputV + ".\n");
							getStats();
							inputV = 0;
							break;
						}	
					}	
				}
				//Luck allocator
				if(input.equals("Luck") || input.equals("luck") || input.equals("lck")||input.equals("LCK")||input.equals("Lck")) {
					while(true) {
						System.out.println("Luck has been selected. How many points would you like to distribute?");
						
						input = this.input.next();
						
						//Conversion of a String to an Integer
						if(input.equals("exit") || input.equals("Exit")) {
							break;
						}else {
						
							try {
							
								inputV = Integer.parseInt(input);
							
							} catch (NumberFormatException e) {
								System.out.println("That is not a number.");
							}
						}
						
						if(inputV > statpts) {
							System.out.println("Invalid amount. Exeeded the total amount of points available.\n");
						}else if(inputV < 0) {
							System.out.println("Invalid amount. Type cannot be a negative value.\n");
						}else if(inputV == 0){
							System.out.println("Invalid amount. You cannot add nothing with nothing.\n" );
						}else{
							this.Luck = this.Luck + inputV;
							statpts = statpts - inputV;
							System.out.println("Your Luck has increased by " + inputV + ".\n");
							getStats();
							inputV = 0;
							break;
						}	
					}	
				}
				
//				getStats();
				
			} //end of loop
			
			System.out.println("Type 'exit' to exit the stat menu");
			input = this.input.next();
			
			if(input.equals("exit") || input.equals("Exit")) {
				run = false;
				return;
			}
			
		}
		
	}
	
	public Stats() {
		//stats are preset at 0
		this.Str = 0;
		this.Int = 0;
		this.Dex = 0;
		this.Will = 0;
		this.Luck = 0;
		
		//base exp for starting character	
		setExpRequirements();
		
	}
	private void setExpRequirements() {
		//Initiliazing experience requirement current max level 50
		
		currentlevel = 1;
		for(int i = 1; i < lvl.length; i++) {
			//Exp requirements based on level instead of iterated gen
			
			// lvl 1 - 10
			if(i < 10) {
				lvl[i] = reachExp;
				reachExp = (int) (reachExp + (1000*1.12345));
			}
			
			// lvl 10 - 25
			if(i >= 10 && i < 25) {
				lvl[i] = reachExp;
				reachExp = (int) (reachExp + (1500*1.2345));
			}
			
			// lvl 25 - 40
			if(i >= 25 && i < 40) {
				lvl[i] = reachExp;
				reachExp = (int) (reachExp + (2500*1.2345));
			}
			
			// lvl 40 - 50
			if(i >= 40 && i < 50) {
				lvl[i] = reachExp;
				reachExp = (int) (reachExp + (4500*1.2345));
			}
			//System.out.println("Reach " + lvl[i] + " to get to level: " + i); //dont mind this. just testing out exp requirement gen
		}
		//System.out.println("Current level: " + currentlevel);
		
		System.out.println("Exp requirements are set!");
	}
	
	
	
	public void getExpRequirements() {
		for(int i = 1; i < lvl.length; i++) {
			System.out.println(lvl[i]);
		}
	}
	
	public void getStats() {
		
		//this just posts your stats. nothing much here.
		System.out.println("Level: " + currentlevel);
		System.out.println("---------------");
		System.out.println("STR: " + Str);
		System.out.println("INT: " + Int);
		System.out.println("DEX: " + Dex);
		System.out.println("WLL: " + Will);
		System.out.println("LCK: " + Luck);
		System.out.println("");
		
	}
	
	// reposts for every new level up
	
	private void getStats(int temp1, int temp2, int temp3, int temp4, int temp5) {
		
		System.out.println("Level: " + (currentlevel) );
		System.out.println("---------------");
		if(temp1 == 0) {
			System.out.println("STR: " + Str);
		}else {	
			System.out.println("STR: " + Str + " + " + temp1);
		}
		
		if(temp2 == 0) {
			System.out.println("INT: " + Int);
		}else {
			System.out.println("INT: " + Int + " + " + temp2);
		}
		
		if(temp3 == 0) {
			System.out.println("DEX: " + Dex);
		}else {
		System.out.println("DEX: " + Dex + " + " + temp3);
		}
		
		if(temp4 == 0) {
			System.out.println("WLL: " + Will);
		}else {
			System.out.println("WLL: " + Will + " + "+ temp4);
		}
		
		if(temp5 == 0) {
			System.out.println("LCK: " + Luck);
		}else {
			System.out.println("LCK: " + Luck + " + "+ temp5);
		}
		System.out.println("");
	}
	
	
	//THE actual level up and RnG stat distribution
	
	private void lvlUp() {
		
		//Buzz kill or not. Hail Mary on RnG
		
		//one up!
		currentlevel = currentlevel + 1;
		
		temp1 = rand.nextInt(3);
		temp2 = rand.nextInt(3);
		temp3 = rand.nextInt(3);
		temp4 = rand.nextInt(3);
		temp5 = rand.nextInt(3);
		
		getStats(temp1, temp2, temp3, temp4, temp5);
		
		this.Str = Str + temp1;
		this.Int = Int + temp2;
		this.Dex = Dex + temp3;
		this.Will = Will + temp4;
		this.Luck = Luck + temp5;
		
		
	}
	
	private void lvlUpContin(int increments) {
		
		//Buzz kill or not. Hail Mary on RnG
		
		for(int i = 0; i < increments; i++) {
			
			temp1 = temp1 + rand.nextInt(3);
			temp2 = temp2 + rand.nextInt(3);
			temp3 = temp3 + rand.nextInt(3);
			temp4 = temp4 + rand.nextInt(3);
			temp5 = temp5 + rand.nextInt(3);
			
		}
		getStats(temp1, temp2, temp3, temp4, temp5);
		
		
//		this.Str = Str + temp1;
//		this.Int = Int + temp2;
//		this.Dex = Dex + temp3;
//		this.Will = Will + temp4;
//		this.Luck = Luck + temp5;
		
	}
	
	//The stuff that really works here.
	
	public void addExp(int add) {
		DecimalFormat format = new DecimalFormat("#,###");
		float calc = 0;
		Exp = Exp + add;
		int loop = 0;
		System.out.println(add + " Exp gained!");
		System.out.println("=======================");

		
		//lvl array holds current exp path to next level
		if(Exp > lvl[currentlevel]) {
			System.out.println("Level up!");
			lvlUp(); //current level + 1
			
			//Sets Exp back to starting position instead of same value.
			Exp = Exp - lvl[currentlevel-1];
			calc = ((float)Exp/lvl[currentlevel + 1])*100;
			
			if(calc > 100) {
				calc = 100;
			}
			
			System.out.println("Progress: " + format.format(Exp) + " / " + format.format(lvl[currentlevel + 1]) + " = " + (int)calc + "%" + " Complete! ");
			System.out.println("");
			
			//Exp carry over if amount is greater than exp required
			if(Exp > lvl[currentlevel]) {
				
				System.out.println((Exp - lvl[currentlevel + 1]) + " Exp gained!");
				System.out.println("=======================");
				System.out.println("");
			}
			
			while(Exp > lvl[currentlevel]) {
				//While the gained Exp is larger than the required Exp to level
				
//				System.out.println("Level up!");
//				lvlUpContin();
				
				currentlevel++;
				loop++;
				Exp = Exp - lvl[currentlevel];
				
				//System.out.println(Exp  + " - " + lvl[currentlevel] + " " + loop);
				
				calc = ((float)Exp/lvl[currentlevel + 1])*100;
				
				if(calc > 100) {
					calc = 100;
				}
				
				
				System.out.println("Progress: " + Exp + " / " + lvl[currentlevel + 1] + " = " + (int)calc + "%" + " Complete! ");
				System.out.println("");
				
				if(Exp > lvl[currentlevel]) {
					System.out.println((Exp - lvl[currentlevel + 1]) + " Exp gained!");
					System.out.println("=======================");
					System.out.println("");

				}
				

			}
			
			if(loop > 0) {
				
				lvlUpContin(loop);
				
				System.out.println("Progress: " + Exp + " / " + lvl[currentlevel] + " = " + (int)calc + "%" + " Complete! ");
				System.out.println("");
				
				System.out.println("Iterated: " + loop);
			}
			
		
		}
		else{
			calc = ((float)Exp/lvl[currentlevel])*100;
			
			if(calc > 100) {
				calc = 100;
			}
			System.out.println("Progress: " + Exp + " / " + lvl[currentlevel] + " = " + (int)calc + "%" + " Complete! \n");
		}
		
	}
}
